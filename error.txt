from googleapiclient.discovery import build
from google.auth.transport.requests import Request
import base64
import os
import pickle
import pytesseract
from PIL import Image
from pdf2image import convert_from_bytes
from transformers import pipeline
from nltk.tokenize import sent_tokenize
import requests  # For Jira API

SCOPES = ['https://www.googleapis.com/auth/gmail.modify']
SAVE_DIR = "attachments"

# Jira Configuration
JIRA_URL = "https://your-jira-instance.atlassian.net"
JIRA_USERNAME = "your-email@example.com"
JIRA_API_TOKEN = "your-api-token"
JIRA_PROJECT_KEY = "PROJECT"

# Load AI summarization model
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

def authenticate_gmail():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            from google_auth_oauthlib.flow import InstalledAppFlow
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=8080)

        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    return creds

def get_unread_emails():
    creds = authenticate_gmail()
    service = build('gmail', 'v1', credentials=creds)

    results = service.users().messages().list(userId='me', q="is:unread label:inbox", maxResults=5).execute()
    messages = results.get('messages', [])

    if not messages:
        print("No new unread emails.")
        return

    os.makedirs(SAVE_DIR, exist_ok=True)

    for msg in messages:
        msg_id = msg['id']
        email_data = service.users().messages().get(userId='me', id=msg_id, format='full').execute()

        headers = email_data["payload"]["headers"]
        subject = next(header["value"] for header in headers if header["name"] == "Subject")
        sender = next(header["value"] for header in headers if header["name"] == "From")

        print(f"From: {sender}\nSubject: {subject}")

        body = None
        parts = email_data["payload"].get("parts", [])
        for part in parts:
            if part["mimeType"] == "text/plain":
                body = base64.urlsafe_b64decode(part["body"]["data"]).decode("utf-8")
                print(f"Body:\n{body}\n{'-'*50}")
                summary = summarize_text(body)  
                create_jira_ticket(subject, sender, summary)

            if part.get("filename") and "attachmentId" in part["body"]:
                attachment_id = part["body"]["attachmentId"]
                attachment = service.users().messages().attachments().get(userId="me", messageId=msg_id, id=attachment_id).execute()
                data = base64.urlsafe_b64decode(attachment["data"])

                file_path = os.path.join(SAVE_DIR, part["filename"])
                with open(file_path, "wb") as f:
                    f.write(data)
                print(f"Attachment saved: {file_path}")

                process_attachment(file_path, subject, sender)

        mark_email_as_read(service, msg_id)

def process_attachment(file_path, subject, sender):
    extracted_text = ""
    if file_path.endswith(".txt"):
        with open(file_path, "r", encoding="utf-8") as f:
            extracted_text = f.read()
    elif file_path.endswith(".pdf"):
        extracted_text = extract_text_from_pdf(file_path)
    elif file_path.endswith((".png", ".jpg", ".jpeg", ".tiff", ".bmp")):
        extracted_text = extract_text_from_image(file_path)

    if extracted_text:
        summary = summarize_text(extracted_text)
        create_jira_ticket(subject, sender, summary)

def extract_text_from_pdf(file_path):
    with open(file_path, "rb") as f:
        images = convert_from_bytes(f.read())
    extracted_text = "\n".join(pytesseract.image_to_string(img) for img in images)
    print(f"PDF Extracted Text:\n{extracted_text}\n{'-'*50}")
    return extracted_text

def extract_text_from_image(file_path):
    img = Image.open(file_path)
    text = pytesseract.image_to_string(img)
    print(f"Image Extracted Text:\n{text}\n{'-'*50}")
    return text

def summarize_text(text):
    """Summarizes extracted text using AI."""
    if len(text.split()) < 50:  # If text is too short, return as is
        return text.strip()

    text_chunks = [text] if len(sent_tokenize(text)) < 10 else [" ".join(sent_tokenize(text)[:10])]
    summary = summarizer(text_chunks[0], max_length=100, min_length=30, do_sample=False)[0]['summary_text']
    
    print(f"AI Summary:\n{summary}\n{'-'*50}")
    return summary

def create_jira_ticket(subject, sender, summary):
    """Creates a Jira ticket with email summary."""
    url = f"{JIRA_URL}/rest/api/3/issue"
    auth = (JIRA_USERNAME, JIRA_API_TOKEN)

    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    payload = {
        "fields": {
            "project": {"key": JIRA_PROJECT_KEY},
            "summary": subject,
            "description": f"**From:** {sender}\n\n**Summary:**\n{summary}",
            "issuetype": {"name": "Task"}
        }
    }

    response = requests.post(url, json=payload, headers=headers, auth=auth)

    if response.status_code == 201:
        print(f"Jira Ticket Created: {response.json()['key']}\n{'-'*50}")
    else:
        print(f"Failed to create Jira ticket: {response.text}\n{'-'*50}")

def mark_email_as_read(service, msg_id):
    """Marks an email as read in Gmail."""
    service.users().messages().modify(userId='me', id=msg_id, body={"removeLabelIds": ["UNREAD"]}).execute()
    print(f"Marked email {msg_id} as read.\n{'-'*50}")

if __name__ == "__main__":
    get_unread_emails()